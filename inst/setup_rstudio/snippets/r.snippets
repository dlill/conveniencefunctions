
snippet IQRcodeReview
	# -------------------------------------------------------------------------#
	# Code Review Status of the Function
	# -------------------------------------------------------------------------#
	# [ ] The (exported) function is fully documented
	# [ ] Author information is provided
	# [ ] One or several family names are provided
	# [ ] Test function(s) exist and pass
	# [ ] The function is obfuscated
	# [ ] The code is sufficiently commented
	# -------------------------------------------------------------------------#
	# [ ] Signature: ${1:Initials}
	# -------------------------------------------------------------------------#


snippet loaddMod
	devtools::load_all("~/Promotion/Promotion/Software/dMod")

snippet loadpetab
	devtools::load_all("~/Promotion/Promotion/Projects/petab")

snippet loadOmicsTools
	devtools::load_all("~/Promotion/Promotion/Projects/OmicsTools")

snippet load_all
	devtools::load_all()

snippet loadcf
	devtools::load_all("~/Promotion/Promotion/Projects/conveniencefunctions")

snippet IQDsetwdIsobolePublication
	setwd("/IQDESKTOP/Promotion/Projects/IntiQuan/SafeCopies/IsobolePublication")

snippet IQDsetwdMMVIsoboles
	setwd("~/PROJTOOLS/MMVIsoboles")

snippet IQDloadIsoboles
	devtools::load_all("~/PROJTOOLS/MMVIsoboles")

snippet IQDloadIQRmalaria
	devtools::load_all("~/PROJTOOLS/IQRmalaria/IQRmalaria")

snippet opencf
	`r if (Sys.info()["nodename"] == "IQdesktop") 'rstudioapi::openProject("~/PROJTOOLS/conveniencefunctions/conveniencefunctions.Rproj" $0)' else if (Sys.info()["nodename"] == "unilaptop") 'rstudioapi::openProject("~/Promotion/Promotion/Projects/conveniencefunctions/conveniencefunctions.Rproj" $0)'`

snippet openPilot
	rstudioapi::openProject("/home/daniel/Promotion/Promotion/Projects/LiSyM/Pilot/PilotProteomics/PilotProteomics.Rproj" $0)

snippet openTGF
	rstudioapi::openProject("/home/daniel/Promotion/Promotion/Projects/LiSyM/TGFb/TGFb.Rproj")

snippet file.editdModImport.R
	file.edit("~/Promotion/Promotion/Projects/petab/R/dMod-import.R")

snippet file.editnormIndiv.R
	file.edit("~/Promotion/Promotion/Software/dMod/R/normIndiv.R")

snippet file.editdMod-pd.R
	file.edit("~/Promotion/Promotion/Projects/petab/R/dMod-pd.R")

snippet file.editPEtab.R
	file.edit("~/Promotion/Promotion/Projects/petab/R/PEtab.R")


snippet cf_installSnippetsPowerInstall
	system("cd && cd Promotion/Promotion/Projects && R CMD INSTALL --no-multiarch --with-keep.source conveniencefunctions")
	system("Rscript -e 'conveniencefunctions::install_cfsnippets(T)'")

snippet pkill_f_rstudio
	system("pkill -f rstudio")

snippet Rscript
	system(paste0("Rscript ", $0), wait = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE)

snippet RscriptVanilla
	system(paste0("Rscript --vanilla ", $0), wait = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE)

snippet gpush
	system("git push", wait = FALSE)

snippet gpullsh
	system("git pull && git push", wait = FALSE)

snippet gpull
	system("git pull", wait = FALSE)

snippet status
	system("git status", wait = FALSE)

snippet gstatus
	system("git status", wait = FALSE)

snippet gall
	conveniencefunctions::gall("$1")

snippet gcom
	conveniencefunctions::gitcom("$1")

snippet gam
	conveniencefunctions::gitam("$1")

snippet gnam
	conveniencefunctions::gitnam()

snippet gitpullsh
	system("git pull && git push", wait = FALSE)

snippet gitpull
	system("git pull", wait = FALSE)

snippet gitstatus
	system("git status", wait = FALSE)

snippet gitall
	conveniencefunctions::gall("$1")

snippet gitcom
	conveniencefunctions::gitcom("$1")

snippet gitam
	conveniencefunctions::gitam("$1")

snippet gitnam
	conveniencefunctions::gitnam()

snippet gitlog
	system("git log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short", wait = FALSE)


snippet code 
	system("printf 'y' | code $0.", wait = FALSE)

snippet codeParent2Dir 
	system("printf 'y' | code $0../../.", wait = FALSE)

snippet codeParent3Dir 
	system("printf 'y' | code $0../../../.", wait = FALSE)

snippet codeProjectDir 
	system("printf 'y' | code `r rstudioapi::getActiveProject()`", wait = FALSE)

snippet unlinkdMod
	unlink(list.files(".", "\\\\.o$|\\\\.so$|\\\\.c$"))

snippet whiledevlist
	while(length(dev.list())) dev.off()

snippet whiledevlistDEVICE
	devlist <- dev.list()
	for(dev in devlist[names(devlist) == "$0png"]) dev.off(dev)

snippet ggsavBASE
	pl = cfgrab()
	ggsave(file.path(.outputFolder, $0), pl, width = 15.5, height = 10, scale = 1, units = "cm")

snippet ggsavcfoutputFigureFUTURE
	if (!"multisession" %in% class(future::plan())) future::plan("multisession")
	`%<-%`(wup,cf_outputFigure(
	  pl = pl, filename = file.path(.outputFolder, $0), width = 21, height = 29.7, scale = 1, units = "cm"
	  # , paginateInfo = cf_paginateInfo(facets = ~cellline+name, scales = "free", nrow = 2, ncol = 2, type = "wrap")
	  ))

snippet ggsavPAGINATE
	cf_outputFigure(file.path(.outputFolder, $0), pl, width = 15.5, height = 10, scale = 1, units = "cm",
	paginateInfo = cf_paginateInfo(
	))

snippet ggsav
	ggsave(file.path(.outputFolder, $0), pl, width = 15.5, height = 10, scale = 1, units = "cm")

snippet widthWitdh
	width = width, height = height, scale = scale, units = units

snippet widthWord
	width = 21-2.5*2, height = 29.7-2.5*2, scale = 1, units = "cm"

snippet widthA4
	width = 21, height = 29.7, scale = 1, units = "cm"

snippet widthDissFullPage
	width = 15.5, height = 23.5, scale = 1, units = "cm"

snippet widthDiss_16.9
	width = 15.5, height = 15.5*(9/16), scale = 1, units = "cm"

snippet widthDiss_16.10
	width = 15.5, height = 15.5*(10/16), scale = 1, units = "cm"

snippet widthA4Landscape
	width = 29.7, height = 21, scale = 1, units = "cm"

snippet nrownrowncolncol
	nrow = nrow, ncol = ncol, scales = scales, page = page

snippet nrow3ncol4
	nrow = 3, ncol = 4, scales = "free", page = 1

snippet futureEval
	if (!"multisession" %in% class(future::plan())) future::plan("multisession")
	future::`%<-%`(wup,$0)


snippet futurePlanSequential
	future::plan("sequential")

snippet planSequential
	future::plan("sequential")

snippet factorUnique
	factor($0, unique($0))

snippet melt
	melt($0, variable.name = "VARIABLE", variable.factor = FALSE, value.name = "VALUE")

snippet compare
	conveniencefunctions::compare($0)

snippet tempfile
	tempfile(fileext = "$0")

snippet IQRtools:::
	IQRtools:::

snippet uniquelength
	unique() %>% length()

snippet FLASE
	FALSE

snippet splitchunk
	```
	
	```{r}

snippet funciton
	function

snippet is.na
	is.na

snippet unique
	unique

snippet unqiue
	unique

snippet .Last.value
	.Last.value

snippet cfcopyscript
	conveniencefunctions::cf_copy_script($0)

snippet cfcopyscriptTwoCursors
	conveniencefunctions::cf_copy_script($0, $0)

snippet IQRoutputFig
	IQRoutputFigure(pl, filename = file.path(.outputFolder, $0), 
	  opt.pagesize = opt.pagesize(width = 14, height = 10, scale = 0.6))

snippet opt.pagesize
	opt.pagesize = opt.pagesize(14,10,0.6)

snippet file.pathoutputFolder
	file.path(.outputFolder, $0)

snippet rstudioapi
	rstudioapi::

snippet rstudio_theme_pastel
	rstudioapi::applyTheme("pastel on dark")

snippet rstudio_theme_textmate
	rstudioapi::applyTheme("textmate (default)")

snippet ggly
	plotly::ggplotly()

snippet devdoc
	devtools::document()

snippet inpllace
	`:=`($0)

snippet inplace
	,`:=`($0)

snippet aestheticsfillcolor
	aesthetics = c("fill", "color")

snippet formatMb
	format(units = "Mb")

snippet authormduni
	#' @author Daniel Lill (daniel.lill@physik.uni-freiburg.de)
	#' @md

snippet cfhead
	# -------------------------------------------------------------------------#
	# 0 Header ----
	# -------------------------------------------------------------------------#
	#
	# `r basename(rstudioapi::getSourceEditorContext()$path)`
	#
	# [PURPOSE]
	# 
	# $0
	#
	#
	# [AUTHOR]
	# Daniel Lill
	#
	# [Date]
	# `r date()`
	#
	rm(list = ls(all.names = TRUE))
	try(setwd(dirname(rstudioapi::getSourceEditorContext()\$path)))
	library(conveniencefunctions)
	
	.outputFolder <- paste0("../04-Output/", "`r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`")
	for(folder in c(.outputFolder)) 
	if(!dir.exists(folder)) dir.create(folder)
	
	# -------------------------------------------------------------------------#
	# 1 ----
	# -------------------------------------------------------------------------#
	
	
	
	
	
	
	# Exit ----
	future::plan("sequential")
	


snippet assign_folder_output_data
	.outputFolder <- paste0("../04-Output/", `r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`)
	.dataFolder <- paste0("../01-Data/", `r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`)
	for(folder in c(.outputFolder, .dataFolder)) 
	if(!dir.exists(folder)) dir.create(folder)

snippet assign_folder_output
	.outputFolder <- paste0("../04-Output/", "`r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`")
	for(folder in c(.outputFolder)) 
	if(!dir.exists(folder)) dir.create(folder)

snippet date_cf
	`r format(Sys.time(), "%a %b %d %Y")`

snippet Sys.date_cf
	`r format(Sys.time(), "%a %b %d %Y")`


snippet IQRsection
	# -------------------------------------------------------------------------#
	# $0 ----
	# -------------------------------------------------------------------------#

snippet clist
	# * ${0}

snippet cnllist
	#   ${0}

snippet cslist
	#   * ${0}

snippet csnllist
	#     ${0}

snippet cdodo
	# [ ] ${0}

snippet csdodo
	#   [ ] ${0}

snippet subsectionLIST
	# .. ${0} -----

snippet subsubsectionLIST
	# .... ${0} ------

snippet remark
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----
	# >>>> ${0} <<<<<<<< ----
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----

snippet clremark
	# >>>> ${0} <<<<<<<<<<< ----

snippet scriptdevelopment
	# >> Remove in final script << ----
	${0}

snippet Rprof_profile_line
	rp <- tempfile()
	Rprof(rp)
	${0}
	Rprof(NULL)
	summaryRprof(rp)
	pv <- profvis::profvis(prof_input = rp); htmlwidgets::saveWidget(pv, paste0(rp, ".html")); browseURL(paste0(rp, ".html"))

snippet setwdtempdir
	.tempdir = tempdir()
	.currentdir <- getwd()
	setwd(.tempdir)
	$0

snippet setwdDocument
	try(setwd(dirname(rstudioapi::getSourceEditorContext()\$path)))

snippet printn500
	as_tibble %>% print(n = 500)

snippet printn1000
	as_tibble %>% print(n = 1000)

snippet printn500dt
	print(topn = 500)

snippet printn1000dt
	print(topn = 1000)

snippet catsep_n
	 cat(sep = '\n')

snippet catsep_comman
	 cat(sep = ',\n')

snippet catsep_comma
	 cat(sep = ', ')

snippet thunarHERE
	system("thunar .", wait = FALSE)

snippet thunarOUTPUTFolder
	system(paste0("thunar ", .outputFolder), wait = FALSE)

snippet thunar
	system(paste0("thunar ", $0), wait = FALSE)

snippet nautilusEOG
	system(paste0("eog ", $0), wait = FALSE)

snippet eog
	system(paste0("eog ", $0), wait = FALSE)

snippet nautilusHERE
	system("nautilus .", wait = FALSE)

snippet nautilus
	system(paste0("nautilus ", $0), wait = FALSE)

snippet nautilusOUTPUTFolder
	system(paste0("nautilus ", .outputFolder), wait = FALSE)


