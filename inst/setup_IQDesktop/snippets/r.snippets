snippet IQDsetwdA100
	setwd("/IQDESKTOP/PROJECTS/A100_OZ439-PQP_Isobole/Work/02-Scripts")

snippet IQDsetwdMMVIsoboles
	setwd("/IQDESKTOP/PROJTOOLS/MMVIsoboles")

snippet IQDloadIsoboles
	devtools::load_all("/IQDESKTOP/PROJTOOLS/MMVIsoboles")

snippet IQDloadIQRtools
	devtools::load_all("/IQDESKTOP/PROJTOOLS/IQRtools/IQRtools")

snippet IQDsetwdA09
	setwd("/IQDESKTOP/PROJECTS/A09_Teva_QSP_IL5_PART2/Work/Phase3_Clinical/Scripts/")

snippet compare
	conveniencefunctions::compare($0)

snippet rstudioapi
	rstudioapi::

snippet rstudio_theme_pastel
	rstudioapi::applyTheme("pastel on dark")

snippet rstudio_theme_textmate
	rstudioapi::applyTheme("textmate (default)")

snippet ggly
	plotly::ggplotly()

snippet devdoc
	devtools::document()

snippet inplace
	,`:=`($0)

snippet formatMb
	format(units = "Mb")

snippet cfhead
	# -------------------------------------------------------------------------#
	# 0 Header ----
	# -------------------------------------------------------------------------#
	#
	# `r basename(rstudioapi::getSourceEditorContext()$path)`
	#
	# [PURPOSE]
	# 
	# $0
	#
	#
	# [AUTHOR]
	# Daniel Lill
	#
	# [Date]
	# `r Sys.time()`
	#
	setwd(dirname(rstudioapi::getSourceEditorContext()$path))
	library(conveniencefunctions)
	rm(list = ls(all.names = TRUE))
	assign_folders(`r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`)
	
	# -------------------------------------------------------------------------#
	# 1 ----
	# -------------------------------------------------------------------------#
	
	
	
	
	
	
	# Exit ----
	

	


snippet IQRsection
	# -------------------------------------------------------------------------#
	# $0 ----
	# -------------------------------------------------------------------------#


snippet clist
	# * ${0}

snippet cnllist
	#   ${0}

snippet cslist
	#   * ${0}

snippet csnllist
	#     ${0}

snippet cdodo
	# [] ${0}

snippet csdodo
	#   [] ${0}

snippet subsectionLIST
	# .. ${0} -----

snippet subsubsectionLIST
	# .... ${0} ------

snippet remark
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----
	# >>>> ${0} <<<<<<<< ----
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----

snippet clremark
	# >>>> ${0} <<<<<<<<<<< ----

snippet scriptdevelopment
	# >> Script development. # [] Remove in final script <<
	${0}

snippet Rprof_profile_line
	rp___ <- tempfile()
	Rprof(rp___)
	${0}
	Rprof(NULL)
	pv___ <- profvis::profvis(prof_input = rp___)
	htmlwidgets::saveWidget(pv___, paste0(rp___, ".html"))
	browseURL(paste0(rp___, ".html"))

snippet setwdtempdir
	.tempdir = tempdir()
	.currentdir <- getwd()
	setwd(.tempdir)
	$0

snippet setwdDocument
	try(setwd(dirname(rstudioapi::getSourceEditorContext()$path)))

snippet printn500
	as_tibble %>% print(n = 500)

snippet printn1000
	as_tibble %>% print(n = 1000)

snippet printn500dt
	print(nrows = 500)

snippet printn1000dt
	print(nrows = 1000)

snippet catsep_n
	 cat(sep = '\n')

snippet catsep_comman
	 cat(sep = ',\n')

snippet catsep_comma
	 cat(sep = ', ')

snippet loadcf
	devtools::load_all("~/Promotion/Promotion/Projects/conveniencefunctions")

snippet cfrunbgmstrust
	setwd(.tempdir)
	fit_job <- runbg({
	  ncores <- dMod::detectFreeCores()
	  startpars <- msParframe(cf_est.vec, 200, sd = 2) %>% as.data.frame()
	  startpars <- mutate_at(startpars, vars(matches("offset")), abs)
	  class(startpars) <- c("parframe", "data.frame")
	  fitlist <- mstrust(obj, startpars, 1,10, 
	                     parupper = cf_est.vec * 0 + log(1000), # [] integrate parameters_df better
	                     parlower = cf_est.vec * 0 + log(1e-5), 
	                     iterlim = 200, output = TRUE,
	                     cores = ncores)
	  fitlist
	   # >>                                                             # >>
	}, machine = c(paste0("knecht", 1)), input = c("obj", "cf_est.vec"), filename = "S111-fit_job"
	, recover = T
	)
	setwd(.currentwd)
	# .. get/save/purge -----
	# setwd(file.path(.outputFolder, "02-Estimation"))
	# fit_job\$check()
	# fit <- fit_job\$get()
	# setwd(.currentwd)
	# fit <- unlist(fit, FALSE, FALSE)
	# fit %>% str1
	# fit <- fit %>% cf_as.parframe()
	# saveRDS(fit, file = file.path(.estimationFolder, "fit.rds"))
	# fit <- readRDS(file.path(.estimationFolder, "fit.rds"))
	# fit_job\$purge()


snippet cfrunbgprofile
	setwd(.tempdir)
	profile_job <- runbg({
	  ncores <- dMod::detectFreeCores()
	  profile(obj, bestfit, names(bestfit), cores = ncores)
	}, machine = c(paste0("knecht", 1)), input = c("obj", "bestfit"), filename = "S111-profile_job"
	# , recover = T
	)
	setwd(.currentwd)
	# .. get/save/purge -----
	# setwd(file.path(.outputFolder, "02-Estimation"))
	# profile_job\$check()
	# profile <- profile_job\$get()
	# setwd(.currentwd)
	# profile <- bind_rows(profile)
	# profile %>% str1
	# saveRDS(profile, file = file.path(.estimationFolder, "profile.rds"))
	# profile = readRDS(file = file.path(.estimationFolder, "profile.rds"))
	# profile_job\$purge()

