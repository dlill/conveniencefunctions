snippet IQRcodeReview
	# -------------------------------------------------------------------------#
	# Code Review Status of the Function
	# -------------------------------------------------------------------------#
	# [ ] The (exported) function is fully documented
	# [ ] Author information is provided
	# [ ] One or several family names are provided
	# [ ] Test function(s) exist and pass
	# [ ] The function is obfuscated
	# [ ] The code is sufficiently commented
	# -------------------------------------------------------------------------#
	# [ ] Signature: ${1:Initials}
	# -------------------------------------------------------------------------#



snippet IQDsetwdA100
	setwd("/IQDESKTOP/PROJECTS/A100_OZ439-PQP_Isobole/Work/02-Scripts")

snippet IQDsetwdMMVIsoboles
	setwd("/IQDESKTOP/PROJTOOLS/MMVIsoboles")

snippet IQDloadIsoboles
	if (Sys.info()["sysname"] == "Linux") devtools::load_all("~/PROJTOOLS/MMVIsoboles")
	if (Sys.info()["sysname"] == "Windows") devtools::load_all("c:/PROJTOOLS/MMVIsoboles/")

snippet IQDloadIQRmalaria
	devtools::load_all("~/PROJTOOLS/IQRmalaria/IQRmalaria")

snippet IQDloadIQRexamples
	devtools::load_all("~/PROJTOOLS/IQRexamples")

snippet IQDloadIQRtools
	devtools::load_all("~/PROJTOOLS/IQRtools/IQRtools")
	devtools::load_all("/IQDESKTOP/PROJTOOLS/IQRtools/IQRtools")
	devtools::load_all("c:/PROJTOOLS/IQRtools/IQRtools/")

snippet IQDsetwdA11_91SampleSize
	setwd("/IQDESKTOP/PROJECTS/A11_Teva_QSP_IL15_PART2/Work/T91_Sample_Size_Calc/Scripts/")

snippet IQDsetwdA11_05ModelReduction
	setwd("/IQDESKTOP/PROJECTS/A11_Teva_QSP_IL15_PART2/Work/T05_ModelReduction/Scripts/")

snippet IQDsetwdA07_02ModelReduction
	setwd("/IQDESKTOP/PROJECTS/A07_Teva_QSP_PART1/Work/T02_ModelReduction/Scripts/")

snippet IQDsetwdA09_Phase5
	setwd("/IQDESKTOP/PROJECTS/A09_Teva_QSP_IL5_PART2/Work/Phase5_SampleSize/Scripts/")

snippet IQDsetwdA09_Phase2
	setwd("/IQDESKTOP/PROJECTS/A09_Teva_QSP_IL5_PART2/Work/Phase2_ProofOfConcept/Scripts/")

snippet IQDsetwdA09_Phase3
	setwd("/IQDESKTOP/PROJECTS/A09_Teva_QSP_IL5_PART2/Work/Phase3_Clinical/Scripts/")

snippet opencf
	`r if (Sys.info()["nodename"] == "IQdesktop") 'rstudioapi::openProject("/IQDESKTOP/PROJTOOLS/conveniencefunctions/conveniencefunctions.Rproj" $0)' else if (Sys.info()["nodename"] == "unilaptop") 'rstudioapi::openProject("~/Promotion/Promotion/Projects/conveniencefunctions/conveniencefunctions.Rproj" $0)'`

snippet openIQRmate
	rstudioapi::openProject("~/PROJTOOLS/IQRmate/IQRmate" $0)

snippet openIQRtools
	rstudioapi::openProject("~/PROJTOOLS/IQRtools/IQRtools" $0)

snippet openIQRexamples
	rstudioapi::openProject("~/PROJTOOLS/IQRexamples/IQRexamples" $0)

snippet pull
	system("git pull")

snippet code 
	system("code .", wait = FALSE)

snippet gall
	conveniencefunctions::gall("$1")

snippet cfgall
	conveniencefunctions::gall("$1")

snippet whiledevlist
	while(length(dev.list())) dev.off()

snippet authormd
	#' @author Daniel Lill (daniel.lill@intiquan.com)
	#' @md

snippet ggsav
	ggsave(file.path(.outputFolder, $0), pl, scale = 1, width = 10, height = 8)


snippet melt
	melt($0, variable.name = "VARIABLE", variable.factor = FALSE, value.name = "VALUE")

snippet compare
	conveniencefunctions::compare($0)

snippet FLASE
	FALSE

snippet splitchunk
	```
	
	```{r}

snippet funciton
	function

snippet is.na
	is.na

snippet unique
	unique

snippet unqiue
	unique

snippet cfcopyscript
	conveniencefunctions::cf_copy_script($0)

snippet cfrenamescript
	conveniencefunctions::cf_copy_script($0)
	
snippet IQRoutputFig
	if (!file.exists(file.path(.outputFolder, $1)))
	  IQRoutputFigure($2, filename = file.path(.outputFolder, $1))

snippet file.pathoutputFolder
	file.path(.outputFolder, $0)

snippet rstudioapi
	rstudioapi::

snippet rstudio_theme_pastel
	rstudioapi::applyTheme("pastel on dark")

snippet rstudio_theme_textmate
	rstudioapi::applyTheme("textmate (default)")

snippet ggly
	plotly::ggplotly()

snippet devdoc
	devtools::document()

snippet inplacel
	`:=`($0)

snippet inplace
	,`:=`($0)


snippet aestheticsfillcolor
	aesthetics = c("fill", "color")

snippet formatMb
	format(units = "Mb")

snippet cfhead
	# -------------------------------------------------------------------------#
	# 0 Header ----
	# -------------------------------------------------------------------------#
	#
	# `r basename(rstudioapi::getSourceEditorContext()$path)`
	#
	# [PURPOSE]
	# 
	# $0
	#
	#
	# [AUTHOR]
	# Daniel Lill
	#
	# [Date]
	# `r date()`
	#
	setwd(dirname(rstudioapi::getSourceEditorContext()\$path))
	library(conveniencefunctions)
	rm(list = ls(all.names = TRUE))
	
	.outputFolder <- paste0("../04-Output/", "`r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`")
	for(folder in c(.outputFolder)) 
	if(!dir.exists(folder)) dir.create(folder)
	
	# -------------------------------------------------------------------------#
	# 1 ----
	# -------------------------------------------------------------------------#
	
	
	
	
	
	
	# Exit ----
	


snippet assign_folder_output_data
	.outputFolder <- paste0("../04-Output/", `r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`)
	.dataFolder <- paste0("../01-Data/", `r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`)
	for(folder in c(.outputFolder, .dataFolder)) 
	if(!dir.exists(folder)) dir.create(folder)


snippet assign_folder_output
	.outputFolder <- paste0("../04-Output/", "`r gsub(".R$", "", basename(rstudioapi::getSourceEditorContext()$path))`")
	for(folder in c(.outputFolder)) 
	if(!dir.exists(folder)) dir.create(folder)

snippet date_cf
	`r format(Sys.time(), "%a %b %d %Y")`

snippet Sys.date_cf
	`r format(Sys.time(), "%a %b %d %Y")`


snippet IQRhead
	#### HEADER ================================================================
	#
	# `r basename(rstudioapi::getSourceEditorContext()$path)`
	#
	# [PURPOSE]
	# ${2:Purpose}
	#
	# [AUTHOR]
	# ${3:Author}
	#
	# [CLEANING]
	rm(list = grep("^(\\\.input|\\\.output)", ls(all.names = TRUE), value = TRUE))
	rm(list = ls())
	#
	# [INPUT]
	.inputFolder <- "../"
	#
	# [OUTPUT]
	.outputFolder <- "../Output/`r sub("^SCRIPT_", "", tools::file_path_sans_ext(basename(rstudioapi::getSourceEditorContext()$path)))`/"
	#
	# [OTHER]
	#

	## Preliminaries ====

	setwd(dirname(rstudioapi::getSourceEditorContext()\$path))

	# Default packages (do not load other packages, use "::" instead)
	library(IQRtools)
	library(dplyr)
	library(ggplot2)


	IQRinitCompliance("`r basename(rstudioapi::getSourceEditorContext()$path)`")
	aux_version("IQRtools", minVersion = "`r sub("\\.9000$", "", installed.packages()["IQRtools", "Version"])`")




snippet IQRsection
	# -------------------------------------------------------------------------#
	# $0 ----
	# -------------------------------------------------------------------------#


snippet clist
	# * ${0}

snippet cnllist
	#   ${0}

snippet cslist
	#   * ${0}

snippet csnllist
	#     ${0}

snippet cdodo
	# [ ] ${0}

snippet csdodo
	#   [ ] ${0}

snippet subsectionLIST
	# .. ${0} -----

snippet subsubsectionLIST
	# .... ${0} ------

snippet remark
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----
	# >>>> ${0} <<<<<<<< ----
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ----

snippet clremark
	# >>>> ${0} <<<<<<<<<<< ----

snippet scriptdevelopment
	# >> Remove in final script << ----
	${0}

snippet Rprof_profile_line
	rp <- tempfile()
	Rprof(rp)
	${0}
	Rprof(NULL)
	summaryRprof(rp)
	pv <- profvis::profvis(prof_input = rp); htmlwidgets::saveWidget(pv, paste0(rp, ".html")); browseURL(paste0(rp, ".html"))

snippet setwdtempdir
	.tempdir = tempdir()
	.currentdir <- getwd()
	setwd(.tempdir)
	$0

snippet setwdDocument
	try(setwd(dirname(rstudioapi::getSourceEditorContext()\$path)))

snippet printn500
	as_tibble %>% print(n = 500)

snippet printn1000
	as_tibble %>% print(n = 1000)

snippet printn500dt
	print(topn = 500)

snippet printn1000dt
	print(topn = 1000)

snippet catsep_n
	 cat(sep = '\n')

snippet catsep_comman
	 cat(sep = ',\n')

snippet catsep_comma
	 cat(sep = ', ')

snippet loadcf
	devtools::load_all("~/Promotion/Promotion/Projects/conveniencefunctions")

snippet cfrunbgmstrust
	setwd(.tempdir)
	fit_job <- runbg({
	  ncores <- dMod::detectFreeCores()
	  startpars <- msParframe(cf_est.vec, 200, sd = 2) %>% as.data.frame()
	  startpars <- mutate_at(startpars, vars(matches("offset")), abs)
	  class(startpars) <- c("parframe", "data.frame")
	  fitlist <- mstrust(obj, startpars, 1,10, 
	                     parupper = cf_est.vec * 0 + log(1000), # [] integrate parameters_df better
	                     parlower = cf_est.vec * 0 + log(1e-5), 
	                     iterlim = 200, output = TRUE,
	                     cores = ncores)
	  fitlist
	   # >>                                                             # >>
	}, machine = c(paste0("knecht", 1)), input = c("obj", "cf_est.vec"), filename = "S111-fit_job"
	, recover = T
	)
	setwd(.currentwd)
	# .. get/save/purge -----
	# setwd(file.path(.outputFolder, "02-Estimation"))
	# fit_job\$check()
	# fit <- fit_job\$get()
	# setwd(.currentwd)
	# fit <- unlist(fit, FALSE, FALSE)
	# fit %>% str1
	# fit <- fit %>% cf_as.parframe()
	# saveRDS(fit, file = file.path(.estimationFolder, "fit.rds"))
	# fit <- readRDS(file.path(.estimationFolder, "fit.rds"))
	# fit_job\$purge()


snippet cfrunbgprofile
	setwd(.tempdir)
	profile_job <- runbg({
	  ncores <- dMod::detectFreeCores()
	  profile(obj, bestfit, names(bestfit), cores = ncores)
	}, machine = c(paste0("knecht", 1)), input = c("obj", "bestfit"), filename = "S111-profile_job"
	# , recover = T
	)
	setwd(.currentwd)
	# .. get/save/purge -----
	# setwd(file.path(.outputFolder, "02-Estimation"))
	# profile_job\$check()
	# profile <- profile_job\$get()
	# setwd(.currentwd)
	# profile <- bind_rows(profile)
	# profile %>% str1
	# saveRDS(profile, file = file.path(.estimationFolder, "profile.rds"))
	# profile = readRDS(file = file.path(.estimationFolder, "profile.rds"))
	# profile_job\$purge()

